{{- if or .Values.job.deleteUnusedCrds .Values.job.deleteInactiveProviderRevisions }}

apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-cleanup
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-cleanup
rules:
- apiGroups: ["pkg.crossplane.io"]
  resources: ["providerrevisions"]
  verbs: ["*"]
- apiGroups: ["apiextensions.crossplane.io"]
  resources: ["managedresourceactivationpolicies", "managedresourcedefinitions"]
  verbs: ["*"]
- apiGroups: ["aws.upbound.io", "gcp.upbound.io", "k8s.crossplane.io"]
  resources: ["providerconfigusages"]
  verbs: ["get", "list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "delete", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-cleanup
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-cleanup
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-cleanup
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-cleanup
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    kube-score/ignore: pod-networkpolicy
spec:
  activeDeadlineSeconds: 600
  parallelism: 1
  completions: 1
  template:
    spec:
      serviceAccountName: {{ .Release.Name }}-cleanup
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 90
            preference:
              matchExpressions:
              - key: tools
                operator: In
                values:
                - "true"
      tolerations:
        - key: "tools"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      containers:
      - name: kubectl
        image: {{ .Values.job.image }}:{{ .Values.job.tag }}
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
            ephemeral-storage: 200Mi
          requests:
            cpu: 1m
            memory: 16Mi
            ephemeral-storage: 2Mi
        command:
        - /bin/bash
        - -c
        - |
          #!/bin/bash
{{- if .Values.job.deleteInactiveProviderRevisions | default false }}
          # Get all ProviderRevisions with desiredState = Inactive
          INACTIVE_REVISIONS=$(kubectl get providerrevisions.pkg.crossplane.io -o json | \
          jq -r '.items[] | select(.spec.desiredState == "Inactive") | .metadata.name')

          if [ -z "$INACTIVE_REVISIONS" ]; then
              echo "No inactive ProviderRevisions found."
          else
              echo "Found inactive ProviderRevisions to delete:"
              echo "$INACTIVE_REVISIONS"
              echo ""
              
              # Loop through and delete each inactive revision
              for revision in $INACTIVE_REVISIONS; do
                  echo "Deleting ProviderRevision: $revision"
                  kubectl delete providerrevisions.pkg.crossplane.io "$revision"
              done
              
              echo ""
              echo "ProviderRevision cleanup complete!"
          fi
{{- end }}
{{- if .Values.job.deleteUnusedCrds | default false }}
          # Get CRDs actually in use from providerconfigusages
          AWSUSEDAPIS=$(kubectl get providerconfigusages.aws.upbound.io -o json | \
          jq -r '.items[]?.resourceRef? | select(. != null) | "\(.kind)|\(.apiVersion)"' | \
          sort -u | \
          while IFS='|' read -r kind apiVersion; do
              # Extract group from apiVersion
              group=$(echo "$apiVersion" | cut -d'/' -f1)
              
              # Query CRDs to find the one matching this kind and group
              kubectl get crd -o json | \
              jq -r --arg kind "$kind" --arg group "$group" \
              '.items[] | select(.spec.group == $group and .spec.names.kind == $kind) | .metadata.name' 
          done | sort -u)
          
          GCPUSEDAPIS=$(kubectl get providerconfigusages.gcp.upbound.io -o json | \
          jq -r '.items[]?.resourceRef? | select(. != null) | "\(.kind)|\(.apiVersion)"' | \
          sort -u | \
          while IFS='|' read -r kind apiVersion; do
              # Extract group from apiVersion
              group=$(echo "$apiVersion" | cut -d'/' -f1)
              
              # Query CRDs to find the one matching this kind and group
              kubectl get crd -o json | \
              jq -r --arg kind "$kind" --arg group "$group" \
              '.items[] | select(.spec.group == $group and .spec.names.kind == $kind) | .metadata.name' 
          done | sort -u)
          
          KSUSEDAPIS=$(kubectl get providerconfigusages.k8s.crossplane.io -o json | \
          jq -r '.items[]?.resourceRef? | select(. != null) | "\(.kind)|\(.apiVersion)"' | \
          sort -u | \
          while IFS='|' read -r kind apiVersion; do
              # Extract group from apiVersion
              group=$(echo "$apiVersion" | cut -d'/' -f1)
              
              # Query CRDs to find the one matching this kind and group
              kubectl get crd -o json | \
              jq -r --arg kind "$kind" --arg group "$group" \
              '.items[] | select(.spec.group == $group and .spec.names.kind == $kind) | .metadata.name' 
          done | sort -u)

          # Get CRDs from ManagedResourceActivationPolicies
          ACTIVATE=$(kubectl get managedresourceactivationpolicies.apiextensions.crossplane.io -o json | \
          jq -r '.items[].spec.activate[]' | \
          sort -u)
          if [ "$ACTIVATE" == "" ]
          then
            echo "Unable to find any managedresourceactivationpolicies. Aborting."
            exit 1
          fi
          # Combine both lists and deduplicate
          KEEP_APIS=$(echo -e "$AWSUSEDAPIS\n$GCPUSEDAPIS\n$KSUSEDAPIS\n$ACTIVATE" | sort -u | grep -v '^$')

          echo "APIs to keep:"
          echo "$KEEP_APIS"
          echo ""

          # Get all ManagedResourceDefinitions and delete those not in the keep list
          echo "Checking ManagedResourceDefinitions for deletion..."

          # Get all MRDs
          ALL_MRDS=$(kubectl get managedresourcedefinitions.apiextensions.crossplane.io -o json | \
          jq -r '.items[] | select(.spec.state == "Active") | .metadata.name' | sort -u)

          # Loop through MRDs and delete those not in the keep list
          for mrd in $ALL_MRDS; do
              # Check if this MRD is in the keep list
              if echo "$KEEP_APIS" | grep -q "^${mrd}$"; then
                  echo "Keeping: $mrd"
              else
                  echo "Deleting: $mrd"
                  kubectl delete managedresourcedefinitions.apiextensions.crossplane.io "$mrd"
                  kubectl delete customresourcedefinition "$mrd"
              fi
          done

          echo ""
          echo "Cleanup complete!"
          echo "Checking for inactive ProviderRevisions..."
{{- end }}

      restartPolicy: Never
  backoffLimit: 5
{{- end }}
